name: "Curly Template"
scopeName: "text.html.curly"
fileTypes: [
	"curly"
]
patterns: [
	{
		include: "#tagContainers"
	}
	{
		include: "text.html.basic"
	}
]
repository:
	tagContainers:
		patterns: [
			{
				name: "comment.block.curly"
				begin: "(?<!\\{)\\{\\{!"
				end: "\\}\\}"
			}
			{
				name: "meta.function.terminate.curly"
				begin: "(?<!\\{)(\\{\\{)(/)"
				end: "(\\}\\})"
				beginCaptures:
					"1":
						name: "keyword.control.begin.curly"
					"2":
						name: "keyword.operator.terminate.curly"
				endCaptures:
					"1":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#terminateTag"
					}
				]
			}
			{
				name: "meta.function.if.curly"
				begin: "(?<!\\{)(\\{\\{)(#)"
				end: "(\\}\\})"
				beginCaptures:
					"1":
						name: "keyword.control.begin.curly"
					"2":
						name: "keyword.operator.if.curly"
				endCaptures:
					"1":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#tag"
					}
				]
			}
			{
				name: "meta.function.unless.curly"
				begin: "(?<!\\{)(\\{\\{)(\\^)"
				end: "(\\}\\})"
				beginCaptures:
					"1":
						name: "keyword.control.begin.curly"
					"2":
						name: "keyword.operator.unless.curly"
				endCaptures:
					"1":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#tag"
					}
				]
			}
			{
				name: "meta.function.collection.curly"
				begin: "(?<!\\{)(\\{\\{)(\\*)"
				end: "(\\}\\})"
				beginCaptures:
					"1":
						name: "keyword.control.begin.curly"
					"2":
						name: "keyword.operator.collection.curly"
				endCaptures:
					"1":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#tag"
					}
				]
			}
			{
				name: "meta.function.context.curly"
				begin: "(?<!\\{)(\\{\\{)(@)"
				end: "(\\}\\})"
				beginCaptures:
					"1":
						name: "keyword.control.begin.curly"
					"2":
						name: "keyword.operator.context.curly"
				endCaptures:
					"1":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#tag"
					}
				]
			}
			{
				name: "meta.function.basic.curly"
				begin: "(?<!\\{)\\{\\{(?!\\{)"
				end: "\\}\\}"
				beginCaptures:
					"0":
						name: "keyword.control.begin.curly"
				endCaptures:
					"0":
						name: "keyword.control.end.curly"
				patterns: [
					{
						include: "#tag"
					}
				]
			}
		]
	terminateTag:
		patterns: [
			{
				name: "entity.name.curly"
				match: "([a-z_][a-zA-Z_0-9]*[?!]?)"
			}
		]
	tag:
		patterns: [
			{
				include: "#terminateTag"
			}
			{
				name: "keyword.operator.argument-seperator.curly"
				match: "\\."
			}
			{
				name: "keyword.operator.assignment.curly"
				match: "="
			}
			{
				name: "string.quoted.double.curly"
				match: "\"[^\"]*\""
			}
			{
				name: "string.quoted.single.curly"
				match: "'[^']*'"
			}
		]
